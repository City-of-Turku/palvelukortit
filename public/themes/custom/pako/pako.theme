<?php

/**
 * @file
 * Functions to support theming in the Turun palvelukortit theme.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\node\Entity\Node;

/**
 * Implements hook_preprocess().
 */
function pako_preprocess(&$variables) {
  $variables['icons_path'] = pako_get_icons_path();
  $variables['current_language'] = Drupal::languageManager()->getCurrentLanguage()->getId();
  $variables['#attached']['drupalSettings']['iconsPath'] = $variables['icons_path'];
}

/**
 * Implements hook_preprocess_html() for HTML document templates.
 *
 * Create path to default theme for mobile icons (favicon, apple touch icon,
 * Android icons, ... defined in html tpl.
 *
 * {@inheritdoc}
 */
function pako_preprocess_html(&$variables) {
  global $base_secure_url;
  $variables['theme_path'] = file_create_url($base_secure_url . '/' . drupal_get_path('theme', 'pako'));
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function pako_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    // Retrieve the node object for revisions.
    $node = (is_numeric($node) && !$node instanceof Node) ? Node::load($node) : $node;
    $suggestions[] = 'page__' . $node->bundle();
  }

  if ($taxonomy_term = \Drupal::routeMatch()->getParameter('taxonomy_term')) {
    $suggestions[] = 'page__taxonomy__term__' . $taxonomy_term->bundle();
  }

  $request = \Drupal::request();

  if ($exception = $request->attributes->get('exception')) {
    $status_code = $exception->getStatusCode();
    if (in_array($status_code, [401, 403, 404])) {
      $suggestions[] = 'page__' . $status_code;
    }
  }
}

/**
 * Helper function to get the icons path.
 *
 * @return string|null
 *   Returns path for the icons SVG or null.
 */
function pako_get_icons_path() {
  static $icon_path;
  if (!isset($icon_path)) {
    global $base_secure_url;
    $icon_path = $base_secure_url . '/' . drupal_get_path('theme', 'pako') . '/icons/icons.svg';

    if (!empty($icon_path)) {
      // Add icons path as a global variable.
      return $icon_path;
    }
  }
  return $icon_path;
}

/**
 * Implements hook_form_alter().
 */
function pako_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (
    $form_id === 'views_exposed_form' &&
    $form['#id'] === 'views-exposed-form-faceted-search-page'
  ) {
    $form['text']['#placeholder'] = t('Search for service cards...');
    $form['actions']['submit']['#attributes']['data-twig-suggestion'] = 'search_form_submit';
    $form['actions']['submit']['#attributes']['class'][] = 'search-form__button';
    $form['actions']['submit']['#attributes']['class'][] = 'button--search';
    $form['actions']['submit']['#attributes']['class'][] = 'button--submit';
    $form['actions']['reset']['#attributes']['data-twig-suggestion'] = 'search_form_reset';
    $form['actions']['reset']['#attributes']['class'][] = 'search-form__button--reset';
  }
}

/**
 * Implements hook_theme_suggestions_form_element_alter().
 */
function pako_theme_suggestions_form_element_alter(&$suggestions, array $variables) {
  $element = $variables['element'];

  if (isset($element['#attributes']['data-twig-suggestion'])) {
    $suggestions[] = 'form_element__' . $element['#type'] . '__' . $element['#attributes']['data-twig-suggestion'];
  }

  if (isset($element['#attributes']['id'])) {
    $suggestions[] = 'form_element__' . $element['#type'] . '__' . $element['#attributes']['id'];
  }
}

function pako_preprocess_facets_item_list(&$variables) {
  $facet = $variables['facet'];

  // Handle only service type facets.
  if ($facet->id() !== 'service_type') {
    return;
  }

  // Get service card type color and set it as data-attribute for the template.
  foreach ($variables['items'] as &$item) {
    if (
      isset($item['value']['#attributes']['data-drupal-facet-item-value']) &&
      !empty($item['value']['#attributes']['data-drupal-facet-item-value'])
    ) {
      // Get service type color term.
      $color = \Drupal::entityTypeManager()
        ->getStorage('taxonomy_term')
        ->load($item['value']['#attributes']['data-drupal-facet-item-value']);

      if ($color->hasField('field_service_type_color')) {
        // Dig through field storage and get the color label.
        $allowed_values = $color->getFieldDefinition('field_service_type_color')->getFieldStorageDefinition()->getSetting('allowed_values');
        $color_value = $color->get('field_service_type_color')->value;
        $label = strtolower($allowed_values[$color_value]);
        $item['attributes']->addClass('color--' . $label);
      }
    }
  }
}

/**
 * Implements hook_theme_suggestions_container_alter().
 */
function pako_theme_suggestions_container_alter(&$suggestions, array $variables) {
  $element = $variables['element'];

  if (isset($element['#name'])) {
    $suggestions[] = 'container__' . $element['#name'];
  }
}

/**
 * Implements hook_theme_suggestions_input_alter().
 */
function pako_theme_suggestions_input_alter(&$suggestions, array $variables) {
  $element = $variables['element'];

  if (isset($element['#attributes']['data-twig-suggestion'])) {
    $suggestions[] = 'input__' . $element['#type'] . '__' . $element['#attributes']['data-twig-suggestion'];
  }

  if (isset($element['#attributes']['id'])) {
    $suggestions[] = 'input__' . $element['#type'] . '__' . $element['#attributes']['id'];
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function pako_preprocess_node(&$variables) {
  $node = $variables['node'];

  // Get service card type color and set it as variable for the template.
  if ($node->getType() === 'service_card') {
    if ($node->hasField('field_service_type')) {
      $tid = $node->field_service_type->getString();

      if (!empty($tid)) {
        $color = \Drupal::entityTypeManager()
          ->getStorage('taxonomy_term')
          ->load($tid);

        if ($color->hasField('field_service_type_color')) {
          $variables['service_card_color'] = $color->field_service_type_color->getString();
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function pako_preprocess_pager(&$variables) {
  // Cast current to be INT instead of FLOAT.
  $variables['current'] = isset($variables['current']) ? (int) $variables['current'] : 1;

  // Check for last pager item href link.
  if (!empty($variables['items']['last']['href'])) {
    $splittedLink = explode("page=", $variables['items']['last']['href'])[1];
    $variables['pagesTotalAmount'] = (int) $splittedLink + 1;
  }
  else {
    if (!empty($variables['items']['pages'])) {
      $lastArrayItem = end($variables['items']['pages'])['href'];
      $splittedLink = explode("page=", $lastArrayItem)[1];
      $variables['pagesTotalAmount'] = (int) $splittedLink + 1;
    }
  }
}
