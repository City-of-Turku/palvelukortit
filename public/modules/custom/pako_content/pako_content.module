<?php

/**
 * @file
 * Contains pako_content.module.
 */

use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_language_switch_links_alter().
 *
 * Switch link title as desired.
 */
function pako_content_language_switch_links_alter(array &$links, $type, $path) {
  $entity = pako_content_get_route_entity();

  foreach ($links as $lang_code => &$link) {
    switch ($lang_code) {
      case 'en':
        $link['title'] = 'In English';
        break;

      case 'sv':
        $link['title'] = 'PÃ¥ svenska';
        break;

      case 'fi':
        $link['title'] = 'Suomeksi';
        break;
    }

    $link['#abbreviation'] = $lang_code;
    if ($entity && $entity instanceof ContentEntityInterface) {
      if (
        !$entity->hasTranslation($lang_code) ||
        (
          method_exists($entity->getTranslation($lang_code), 'isPublished') &&
          !$entity->getTranslation($lang_code)->isPublished()
        )
      ) {
        $link['#untranslated'] = TRUE;
      }
    }
  }
}

/**
 * Helper function to extract the entity for the supplied route.
 *
 * @return null|ContentEntityInterface
 *   Returns the found entity or null.
 */
function pako_content_get_route_entity() {
  $route_match = \Drupal::routeMatch();
  // Entity will be found in the route parameters.
  if (($route = $route_match->getRouteObject()) && ($parameters = $route->getOption('parameters'))) {
    // Determine if the current route represents an entity.
    foreach ($parameters as $name => $options) {
      if (isset($options['type']) && strpos($options['type'], 'entity:') === 0) {
        $entity = $route_match->getParameter($name);
        if ($entity instanceof ContentEntityInterface && $entity->hasLinkTemplate('canonical')) {
          return $entity;
        }

        // Since entity was found, no need to iterate further.
        return NULL;
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function pako_content_form_node_form_alter(&$form, &$form_state, $form_id) {
  $form['actions']['submit']['#submit'][] = 'pako_content_node_form_submit_callback';
}

/**
 * Form submit callback for node forms.
 */
function pako_content_node_form_submit_callback($form, FormStateInterface $form_state) {
  if ($langcode = $form_state->get('langcode')) {
    $language = [
      'language' => \Drupal::languageManager()->getLanguage($langcode)
    ];

    if ($nid = $form_state->get('nid')) {
      $node = [
        'node' => $nid
      ];

      $form_state->setRedirect('entity.node.canonical', $node, $language);
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function pako_content_form_views_exposed_form_alter(&$form, $form_state, $form_id) {
  // Get current path.
  $current_path = \Drupal::service('path.current')->getPath();

  // Alter admin content view.
  if ($current_path == '/admin/content' && $form_id == 'views_exposed_form') {
    // Get current language.
    $current_lang = \Drupal::languageManager()->getCurrentLanguage()->getId();
    // Get language code parameter value.
    $param_lang = \Drupal::request()->query->get('langcode');

    // Set default value if param language if empty.
    if (!$param_lang) {
      $form['langcode']['#value'] = $current_lang;
    }
  }

  // Include selected facets to the faceted view.
  if ($form['#id'] == 'views-exposed-form-faceted-search-page') {
    $params = \Drupal::requestStack()->getCurrentRequest()->query->all();
    $facet_manager = \Drupal::service('facets.manager');
    $facets = $facet_manager->getEnabledFacets();
    foreach ($facets as $facet) {
      $filter_keys[] = empty($facet->getFacetSourceConfig()->getFilterKey())
        ? 'f'
        : $facet->getFacetSourceConfig()->getFilterKey();
    }
    if (!empty($filter_keys)) {
      foreach (array_unique($filter_keys) as $filter_key) {
        if (!empty($params[$filter_key]) && !empty($param_values = $params[$filter_key])) {
          // Add facet parameters to hidden fields in the forms.
          foreach ($param_values as $key => $value) {
            $form[$filter_key . '[' . $key . ']'] = [
              '#type' => 'hidden',
              '#value' => $value,
            ];
          }
        }
      }
    }
  }
}

/**
 * Implements hook_theme().
 */
function pako_content_theme() {
  return [
    'pako_content_service_card_navigation' => [
      'variables' => [
        'items' => NULL,
      ],
    ],
    'pako_content_service_card_navigation_field' => [
      'variables' => [
        'label' => NULL,
        'label_icon' => NULL,
      ],
    ],
    'pako_content_print_button' => [
      'variables' => [
        'button_title' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_field_widget_form_alter().
 */
function pako_content_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
  $formats = [
    'comment_body' => ['plain_text'],
  ];

  $field_name = $context['items']->getFieldDefinition()->getName();

  if (array_key_exists($field_name, $formats)) {
    $element['#allowed_formats'] = $formats[$field_name];
    $element['#after_build'][] = '_remove_text_format_box';
  }
}

/**
 * After build callback for widget form alter.
 */
function _remove_text_format_box($form_element, FormStateInterface $form_state) {
  // Remove help, guidelines and wrappers.
  unset($form_element['format']['help']);
  unset($form_element['format']['guidelines']);
  unset($form_element['format']['#type']);
  unset($form_element['format']['#theme_wrappers']);

  return $form_element;
}

/**
 * Implements hook_entity_type_alter().
 */
function pako_content_entity_type_alter(array &$entity_types) {
  // Alter the comment entity definition to use this module's forms.
  $entity_types['comment']->setFormClass('default', 'Drupal\pako_content\Form\PakoCommentForm');
  $entity_types['comment']->setFormClass('delete', 'Drupal\pako_content\Form\PakoCommentDeleteForm');
}
